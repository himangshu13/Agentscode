<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Fraud Detection Dashboard</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- SheetJS library for reading Excel files -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f3f4f6;
        }
        .criteria-example {
            font-family: 'Courier New', Courier, monospace;
            background-color: #e5e7eb;
            padding: 2px 6px;
            border-radius: 4px;
            font-size: 0.9em;
        }
    </style>
</head>
<body class="text-gray-800">

    <div class="container mx-auto px-4 py-12">
        <header class="text-center mb-10">
            <h1 class="text-5xl font-extrabold text-gray-900">Fraud Detection Dashboard</h1>
            <p class="text-gray-600 mt-3 text-lg">Upload your database dump as an Excel file and define custom rules to find suspicious data.</p>
        </header>

        <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <!-- Step 1: Upload File -->
            <div class="bg-white p-8 rounded-2xl shadow-lg border border-gray-200">
                <h2 class="text-2xl font-bold mb-4 text-gray-800">Step 1: Upload Excel File</h2>
                <div class="flex items-center justify-center w-full">
                    <label for="file-upload" class="flex flex-col items-center justify-center w-full h-48 border-2 border-gray-300 border-dashed rounded-lg cursor-pointer bg-gray-50 hover:bg-gray-100 transition-colors">
                        <div id="upload-prompt" class="flex flex-col items-center justify-center text-center">
                            <svg class="w-12 h-12 mb-4 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-4-4V7a4 4 0 014-4h2l2 2h4a4 4 0 014 4v2m-4 6h-6a2 2 0 01-2-2v-4a2 2 0 012-2h6a2 2 0 012 2v4a2 2 0 01-2 2z"></path></svg>
                            <p class="mb-2 text-gray-600"><span class="font-semibold">Click to upload</span> or drag and drop</p>
                            <p class="text-xs text-gray-500">.XLSX or .CSV</p>
                        </div>
                        <div id="file-info" class="hidden text-center">
                            <svg class="w-12 h-12 mb-4 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>
                            <p id="file-name" class="font-semibold text-gray-700"></p>
                            <p id="file-rows" class="text-sm text-gray-500"></p>
                        </div>
                        <input id="file-upload" type="file" class="hidden" accept=".xlsx, .xls, .csv" />
                    </label>
                </div>
            </div>

            <!-- Step 2: Define Criteria -->
            <div class="bg-white p-8 rounded-2xl shadow-lg border border-gray-200">
                <h2 class="text-2xl font-bold mb-4 text-gray-800">Step 2: Define Fraud Criteria</h2>
                <p class="text-sm text-gray-600 mb-4">Enter one rule per line. Use column names from your Excel file. Examples:</p>
                <ul class="text-sm text-gray-500 list-disc list-inside mb-4 space-y-1">
                    <li><code class="criteria-example">TransactionAmount > 5000</code></li>
                    <li><code class="criteria-example">IP_Country != Billing_Country</code></li>
                    <li><code class="criteria-example">Email CONTAINS yopmail.com</code></li>
                    <li><code class="criteria-example">TransactionAmount > 1000 AND CardType = 'Prepaid'</code></li>
                </ul>
                <textarea id="criteria-input" class="w-full h-48 p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 font-mono text-sm" placeholder="Enter criteria here..."></textarea>
            </div>
        </div>
        
        <!-- Step 3: Run Analysis -->
        <div class="text-center my-8">
            <button id="run-analysis-btn" class="bg-blue-600 text-white font-bold text-xl px-12 py-4 rounded-lg shadow-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-300 transform hover:scale-105">
                Analyze Data
            </button>
        </div>

        <!-- Step 4: Results -->
        <div id="results-section" class="hidden">
            <h2 class="text-3xl font-bold mb-6 text-center text-gray-800">Analysis Results</h2>
            <div id="no-results" class="hidden text-center bg-green-100 text-green-800 p-6 rounded-lg">
                <h3 class="font-bold text-xl">No Fraudulent Activity Detected</h3>
                <p>The analysis completed successfully, and no rows matched your specified criteria.</p>
            </div>
            <div id="results-table-container" class="hidden bg-white p-6 rounded-2xl shadow-lg border border-gray-200">
                <div class="overflow-x-auto">
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-50">
                            <!-- Headers will be generated here -->
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200">
                            <!-- Rows will be generated here -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

    </div>

    <script>
        const fileUpload = document.getElementById('file-upload');
        const fileNameEl = document.getElementById('file-name');
        const fileRowsEl = document.getElementById('file-rows');
        const uploadPrompt = document.getElementById('upload-prompt');
        const fileInfo = document.getElementById('file-info');
        const criteriaInput = document.getElementById('criteria-input');
        const runAnalysisBtn = document.getElementById('run-analysis-btn');
        const resultsSection = document.getElementById('results-section');
        const noResultsEl = document.getElementById('no-results');
        const resultsTableContainer = document.getElementById('results-table-container');

        let parsedData = [];

        fileUpload.addEventListener('change', handleFile);

        function handleFile(event) {
            const file = event.target.files[0];
            if (!file) return;

            fileNameEl.textContent = file.name;
            uploadPrompt.classList.add('hidden');
            fileInfo.classList.remove('hidden');

            const reader = new FileReader();
            reader.onload = (e) => {
                const data = new Uint8Array(e.target.result);
                const workbook = XLSX.read(data, { type: 'array' });
                const firstSheetName = workbook.SheetNames[0];
                const worksheet = workbook.Sheets[firstSheetName];
                parsedData = XLSX.utils.sheet_to_json(worksheet);
                fileRowsEl.textContent = `${parsedData.length} rows loaded.`;
            };
            reader.readAsArrayBuffer(file);
        }

        runAnalysisBtn.addEventListener('click', runAnalysis);

        function runAnalysis() {
            if (parsedData.length === 0) {
                alert('Please upload a file first.');
                return;
            }
            const criteriaText = criteriaInput.value.trim();
            if (!criteriaText) {
                alert('Please define at least one fraud criterion.');
                return;
            }

            const rules = criteriaText.split('\n').filter(r => r.trim() !== '');
            const fraudulentRows = [];

            parsedData.forEach((row, rowIndex) => {
                const triggeredRules = [];
                rules.forEach(rule => {
                    try {
                        if (evaluateRule(row, rule)) {
                            triggeredRules.push(rule);
                        }
                    } catch (error) {
                       console.error(`Error evaluating rule "${rule}" on row ${rowIndex}:`, error);
                    }
                });
                if (triggeredRules.length > 0) {
                    fraudulentRows.push({ ...row, TriggeredRules: triggeredRules.join('; ') });
                }
            });

            displayResults(fraudulentRows);
        }

        function evaluateRule(row, rule) {
            const ruleParts = rule.split(/ (AND|OR) /i).map(p => p.trim());
            
            let finalResult = evaluateCondition(row, ruleParts[0]);

            for (let i = 1; i < ruleParts.length; i += 2) {
                const operator = ruleParts[i].toUpperCase();
                const nextResult = evaluateCondition(row, ruleParts[i + 1]);
                if (operator === 'AND') {
                    finalResult = finalResult && nextResult;
                } else if (operator === 'OR') {
                    finalResult = finalResult || nextResult;
                }
            }
            return finalResult;
        }

        function evaluateCondition(row, condition) {
            const operators = ['!=', '>=', '<=', '>', '<', '=', 'CONTAINS'];
            let operator = operators.find(op => condition.includes(op));

            if (!operator) return false;

            const [key, valueStr] = condition.split(operator).map(s => s.trim());
            const rowValue = row[key];

            // Remove quotes from value if they exist
            let value = valueStr.replace(/^['"]|['"]$/g, '');

            if (rowValue === undefined) return false;

            const numValue = parseFloat(value);
            const numRowValue = parseFloat(rowValue);

            switch (operator) {
                case '=':
                    return String(rowValue).toLowerCase() == String(value).toLowerCase();
                case '!=':
                    return String(rowValue).toLowerCase() != String(value).toLowerCase();
                case '>':
                    return !isNaN(numRowValue) && !isNaN(numValue) && numRowValue > numValue;
                case '<':
                    return !isNaN(numRowValue) && !isNaN(numValue) && numRowValue < numValue;
                case '>=':
                    return !isNaN(numRowValue) && !isNaN(numValue) && numRowValue >= numValue;
                case '<=':
                    return !isNaN(numRowValue) && !isNaN(numValue) && numRowValue <= numValue;
                case 'CONTAINS':
                    return String(rowValue).toLowerCase().includes(String(value).toLowerCase());
                default:
                    return false;
            }
        }

        function displayResults(rows) {
            resultsSection.classList.remove('hidden');
            const tableHead = resultsTableContainer.querySelector('thead');
            const tableBody = resultsTableContainer.querySelector('tbody');
            tableHead.innerHTML = '';
            tableBody.innerHTML = '';

            if (rows.length === 0) {
                noResultsEl.classList.remove('hidden');
                resultsTableContainer.classList.add('hidden');
                return;
            }
            
            noResultsEl.classList.add('hidden');
            resultsTableContainer.classList.remove('hidden');
            
            // Create headers
            const headers = Object.keys(rows[0]);
            const headerRow = document.createElement('tr');
            headers.forEach(header => {
                const th = document.createElement('th');
                th.className = 'px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider';
                th.textContent = header.replace(/([A-Z])/g, ' $1').trim(); // Add space before caps
                if (header === 'TriggeredRules') {
                    th.className += ' bg-red-100 text-red-800';
                }
                headerRow.appendChild(th);
            });
            tableHead.appendChild(headerRow);

            // Create rows
            rows.forEach(row => {
                const tr = document.createElement('tr');
                headers.forEach(header => {
                    const td = document.createElement('td');
                    td.className = 'px-6 py-4 whitespace-nowrap text-sm text-gray-700';
                    td.textContent = row[header];
                     if (header === 'TriggeredRules') {
                        td.className += ' bg-red-50 font-semibold text-red-700';
                    }
                    tr.appendChild(td);
                });
                tableBody.appendChild(tr);
            });
        }
    </script>
</body>
</html>
